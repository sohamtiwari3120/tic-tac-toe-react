{"version":3,"sources":["index.js"],"names":["Square","props","state","not_clicked","this","winner","value","className","onClick","value_flag","React","Component","Board","i","squares","flag","renderSquare","Game","history","Array","fill","stepNumber","slice","calculateWinner","setState","concat","length","step","status","moves","jumpTo","disabled","Math","max","console","log","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63eefae2.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// class Square extends React.Component {\n//   // constructor(props){\n//   //   super(props)\n//   //   this.state={\n//   //     null_value:null\n//   //   };\n//   // }\n//     render() {\n//       return (\n//         <button \n//         className=\"square\" \n//         onClick={()=>{\n//           // this.props.onClick(this.state.null_value)\n//           // this.setState({null_value:1})\n//           this.props.onClick();\n//         }}>\n//           {this.props.value}\n//         </button>\n//       );\n//     }\n//   }\n// we will now use function componenets,ie if a react componenet does not have any state, we can use functional componenets which are less tedious t write\nclass Square extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      not_clicked:true\n    }\n  }\n  render(){\n    if(this.props.winner && this.props.value===null)\n    return(\n      <button className='square' onClick={this.props.onClick}>{this.props.value}</button>\n    );\n    if(this.props.value===null){\n      if(this.props.value_flag){\n        // this.setState({not_clicked:false})\n        return(\n          <button className='square squareX' onClick={this.props.onClick}>{this.props.value}</button>\n        );\n      }\n      else\n        return(\n         <button className='square squareO' onClick={this.props.onClick}>{this.props.value}</button>\n        );\n    }\n    else if(this.props.value==='X')\n    return(\n      <button className='squareXclicked' onClick={this.props.onClick}>{this.props.value}</button>\n    );\n    else if(this.props.value==='O')\n    return(\n      <button className='squareOclicked' onClick={this.props.onClick}>{this.props.value}</button>\n    );\n  }\n  \n}\n  class Board extends React.Component {\n    // constructor(props){\n    //   super(props)\n    //   this.state={\n    //     flag:true,\n    //     squares: Array(9).fill(null),\n    //   }\n    // }\n    renderSquare(i) {\n      return <Square \n      value={this.props.squares[i]} \n      // onClick={(value)=>{\n      //   const squares = this.state.squares.slice()\n      //   if(value===null){\n      //     if(this.state.flag===0){\n      //       squares[i]='X'\n      //       this.setState({squares:squares, flag: 1})\n      //     }else if(this.state.flag===1){\n      //       squares[i]='O'\n      //       this.setState({squares:squares, flag: 0})\n      //     }\n      //   }\n        \n      // }}\n      onClick={()=>{\n        this.props.onClick(i);\n      }}\n      value_flag={this.props.flag}\n      winner={this.props.winner}\n      />;\n    }\n    \n    render() {\n\n      // const winner = calculateWinner(this.state.squares);\n      // let status;\n      // if(winner){\n      //   status = 'Winner: '+winner;\n      // }else{\n      //   status = 'Next player: '+(this.state.flag?'X':'O');\n      // }\n  \n      return (\n        <div>\n          {/* <div className=\"status\"><b>{this.props.status}</b></div> */}\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n          <br></br>\n          {/* <button onClick={()=>{\n            const squares = Array(9).fill(null)\n            this.setState({squares:squares, flag:true})\n          }}>Reset</button> */}\n        </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n    constructor(props){\n      super(props);\n      this.state={\n        history: [{\n          squares:Array(9).fill(null)\n        }],\n        flag:true,\n        stepNumber:0\n      }\n    }\n\n    handleClick(i){\n      const history = this.state.history.slice(0,this.state.stepNumber+1);\n      const current = history[this.state.stepNumber];\n      const squares= current.squares.slice();\n      if(calculateWinner(squares)||squares[i]!=null)\n      {\n        return;\n      }\n      squares[i]=this.state.flag?'X':'O';\n      this.setState({\n        history:history.concat([{squares:squares,}]), \n        stepNumber:history.length,\n\n        flag:!this.state.flag});\n    }\n\n    jumpTo(step){\n      this.setState({\n        stepNumber: step,\n        flag:(step%2)===0\n      });\n    }\n\n    render() {\n      const history = this.state.history.slice(0, this.state.stepNumber+1);\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares.slice())\n      let status;\n      if(winner){\n        status = 'Winner: '+winner;\n      }else if(this.state.stepNumber===9){\n        status=\"It's a tie!\"\n      }else{\n        status = 'Next player: '+(this.state.flag?'X':'O');\n      }\n      // let temp=[[1],[2],[3],[]]\n      // const moves=temp.map((value,index)=>{})\n\n      // const moves = history.map(\n      //   (step, move)=>{\n      //     // console.log('step:'+step.squares)\n      //     // console.log('move:'+move)\n      //     const desc = move!==0 ? \n      //     'Go to move #'+move:\n      //     'Go to game start';\n        \n      //     return(\n      //      <li key={move}>\n      //        <button onClick={ ()=>this.jumpTo(move) } > \n      //        {desc} \n      //        </button>\n      //      </li>\n      //     );\n      //   });\n      let moves =[\n      <button onClick={ ()=>this.jumpTo(0) } disabled> \n        Reset\n      </button>,\n      <button onClick={ ()=>this.jumpTo(Math.max(this.state.stepNumber-1,0)) } disabled> \n      Undo\n    </button>]\n    if(history.length>1)\n      moves[0] =\n        <button onClick={ ()=>this.jumpTo(0) } > \n          Reset\n        </button>\n    if(history.length>2)\n      moves[1] =\n        <button onClick={ ()=>this.jumpTo(Math.max(this.state.stepNumber-1,0)) } > \n        Undo\n      </button>\n  \n          \n      \n      console.log(moves)\n      return (\n        <div className=\"game\">\n        <div className='title'>Tic Tac Toe</div>\n          <div className=\"game-board\">\n            <Board \n            // status={status} \n            squares={history[this.state.stepNumber].squares}  \n            // flag={this.state.flag} \n            onClick={(i)=>this.handleClick(i)}\n            flag={this.state.flag}\n            winner={winner}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div className='status'>{ status }</div>\n            <div className='controls'>{moves}</div>\n          </div>\n        </div>\n      );\n    }\n  }\n  function calculateWinner(squares){\n    const lines=[\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,4,6],\n      [2,5,8],\n      [0,4,8]\n    ];\n    for( let i = 0; i<lines.length; i++){\n      const [a,b,c]=lines[i];\n      if(squares[a]!=null && squares[a]===squares[b] && squares[b]===squares[c])\n      {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}